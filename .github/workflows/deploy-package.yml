name: Trigger auto deployment for red-scus-demo-aca

# When this action will be executed
on:
  # Automatically trigger it when detected changes in repo
  push:
    branches: 
      [ main ]
    paths:
    - '**'
    - '.github/workflows/deploy-package.yml'

  # Allow mannually trigger 
  workflow_dispatch:      

env:
  version: 'v1.0'
  location: 'southcentralus'
  resource-group-name: 'red-scus-test-rg'
  log-analytics-workspace-name: 'redscusworkspace00111'
  aca-env-name: 'dev-env'
  registry-name: 'redscuscontainerreg000111'
  registry-sku: 'Standard'
  image-name: 'todo-webapi'
  container-name: 'todo-webapi-aca'
  cors-allowed-url: 'https://todo-blazorclient-aca.greenstone-2af09d55.southcentralus.azurecontainerapps.io/'

jobs:
  print:
    runs-on: ubuntu-latest
    outputs:
      rg-name: ${{ steps.step1.outputs.rg-name }}
    steps:
      - name: Print inputs passed to the reusable workflow
        id: step1
        run: |
          echo "::set-output name=rg-name::$resource-group-name"

  build-infra:
    needs: print

    uses: anotherRedbeard/reusable-workflows/.github/workflows/create-aca-infra.yml@main
    with:
      rg-name: ${{ print.outputs.rg-name }}
      location: 'southcentralus'
      law-name: 'redscusworkspace00111'
      aca-env-name: 'dev-env'
      reg-name: 'redscuscontainerreg000111'
      reg-sku: 'Standard'
    secrets:
      azure-creds: ${{ secrets.AZURE_CREDENTIALS }}

  build:
    runs-on: ubuntu-latest
    needs: build-infra

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get Container Registry Credentials
        uses: azure/CLI@v1
        with:
          inlineScript: |
            ACR_USERNAME=$(az acr credential show -n ${{ env.registry-name }} --query username --out tsv)
            ACR_PASSWORD=$(az acr credential show -n ${{ env.registry-name }} --query passwords[0].value --out tsv)
            echo "::add-mask::$ACR_PASSWORD"
            echo ACR_USERNAME=$ACR_USERNAME >> $GITHUB_ENV
            echo ACR_PASSWORD=$ACR_PASSWORD >> $GITHUB_ENV

      - name: Log in to container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.registry-name }}.azurecr.io
          username: ${{ env.ACR_USERNAME }}
          password: ${{ env.ACR_PASSWORD }}

      - name: Build and push container image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.registry-name }}.azurecr.io/${{ env.image-name }}:${{ env.version }}.${{ github.run_number }}
          file: ./Dockerfile
          context: ./

      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear

  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Container Registry Credentials
        uses: azure/CLI@v1
        with:
          inlineScript: |
            ACR_USERNAME=$(az acr credential show -n ${{ env.registry-name }} --query username --out tsv)
            ACR_PASSWORD=$(az acr credential show -n ${{ env.registry-name }} --query passwords[0].value --out tsv)
            echo "::add-mask::$ACR_PASSWORD"
            echo ACR_USERNAME=$ACR_USERNAME >> $GITHUB_ENV
            echo ACR_PASSWORD=$ACR_PASSWORD >> $GITHUB_ENV

      - name: Deploy to containerapp
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az containerapp create -n ${{ env.container-name }} -g ${{ env.resource-group-name }} \
              --image ${{ env.registry-name }}.azurecr.io/${{ env.image-name }}:${{ env.version }}.${{ github.run_number }} \
              --environment ${{ env.aca-env-name }} --registry-server ${{ env.registry-name }}.azurecr.io \
              --registry-username ${{ env.ACR_USERNAME }} \
              --registry-password ${{ env.ACR_PASSWORD }} \
              --ingress external --target-port 5209 \
              --env-vars CorsAllowedHosts=${{ env.cors-allowed-url }}

      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az logout
            az cache purge
            az account clear